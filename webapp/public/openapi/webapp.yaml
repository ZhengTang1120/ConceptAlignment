openapi: 3.0.2
info:
  description: University of Arizona Concept Alignment API
  title: linking
  version: 1.1.0
servers:
  - url: http://linking.cs.arizona.edu
    description: University of Arizona linking server
  - url: http://localhost:9001
    description: Local host running the webapp

components:
  schemas:
    indexedStatus:
      type: object
      properties:
        index:
          description: an autoincrementing number
          type: number
          format: int32
          example: 1
        status:
          type: object
          properties:
            number:
              description: a numeric value for computers
              type: number
              format: int32
              example: 0
            text:
              description: a textual value for humans
              type: string
              example: waiting
    statusResponse:
      type: object
      properties:
        searcher:
          $ref: "#/components/schemas/indexedStatus"
        indexer:
          $ref: "#/components/schemas/indexedStatus"
    score:
      description: a value in the range [-1, 1] with higher being a better match for the search
      type: number
      format: float
    datamart:
      description: the ID of the datamart
      type: object
      properties:
        datamartId:
          description: an indication of the source of the data to distinguish clashing datasetIds from different sources.  Together the datamartId, datasetId, and variableId should form a GUID.
          type: string
        datasetId:
          description: a unique identifer for the dataset within a particular datamart
          type: string
        variableId:
          description: a unique identifier for a variable within a particular dataset
          type: string
    # TODO: This score should really be separate.
    scoredDatamart:
      type: object
      properties:
        score:
          $ref: "#/components/schemas/score"
        datamartId:
          description: an indication of the source of the data to distinguish clashing datasetIds from different sources.  Together the datamartId, datasetId, and variableId should form a GUID.
          type: string
        datasetId:
          description: a unique identifer for the dataset within a particular datamart
          type: string
        variableId:
          description: a unique identifier for a variable within a particular dataset
          type: string
        # The next two are just extra information for the reader.
        variableName:
          description: a more human readable version of the variableId
          type: string
        variableDescription:
          description: an more thorough explanation of the variable
          type: string
    scoredDatamarts:
      description: score and datamart ID of all matches
      type: array
      items:
        $ref: "#/components/schemas/scoredDatamart"
    searchResponse:
      type: array
      items:
        $ref: "#/components/schemas/scoredDatamart"
    compositionalSearchResponse:
      type: array
      items:
        type: object
        properties:
          score:
            $ref: "#/components/schemas/score"
          datamart:
            $ref: "#/components/schemas/datamart"
    flatOntologyNode:
      description: the specification of the ontology node
      type: string
    scoredFlatOntologyNode:
      type: object
      properties:
        score:
          $ref: "#/components/schemas/score"
        ontology:
          $ref: "#/components/schemas/flatOntologyNode"
    compositionalOntologyNode:
      description: the specification of the ontology node
      type: object
      properties:
        concept:
          description: the name of an ontology node within the concept subtree of the compositional ontology
          type: string
        conceptProperty:
          description: the name of an ontology node within the property subtree of the compositional ontology to be associated with the concept
          type: string
        process:
          description: the name of an ontology node within the process subtree of the compositional ontology
          type: string
        processProperty:
          description: the name of an ontology node within the property subtree of the compositional ontology to be associated with the process
          type: string
      required:
        - concept
    scoredCompositionalOntologyNode:
      type: object
      properties:
        concepts:
          type: array
          items:
            $ref: "#/components/schemas/scoredFlatOntologyNode"
        processes:
          type: array
          items:
            $ref: "#/components/schemas/scoredFlatOntologyNode"
        properties:
          type: array
          items:
            $ref: "#/components/schemas/scoredFlatOntologyNode"
    bulkSearchOntologyToDatamartResponse:
      type: array
      items:
        type: object
        properties:
          ontology:
            $ref: "#/components/schemas/flatOntologyNode"
          datamarts:
            $ref: "#/components/schemas/scoredDatamarts"
    bulkSearchDatamartToOntologyResponse:
      type: array
      items:
        type: object
        properties:
          datamart:
            $ref: "#/components/schemas/datamart"
          ontologies:
            description: score and ontology node of all matches
            type: array
            items:
              oneOf:
                - $ref: "#/components/schemas/scoredFlatOntologyNode"
                - $ref: "#/components/schemas/scoredCompositionalOntologyNode"

paths:
  /v1/ping:
    get:
      summary: Respond with OK
      responses:
        200:
          description: OK

  /v1/echo:
    get:
      summary: Echo back the input text
      parameters:
        - name: text
          in: query
          description: text that should be echoed back
          required: true
          schema:
            type: string
          example: Kilroy was here.
      responses:
        200:
          description: A copy of the input
          content:
            'text/plain; charset=utf-8':
              schema:
                type: string

  /v1/status:
    get:
      summary: Report the status (busy or ready)
      responses:
        200:
          description: Status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/statusResponse"

  /v1/search:
    get:
      summary: Perform the concept alignment
      description: "The query term is converted to vectors, the nearest matches from the datamart are found, and then they are returned with descriptions."
      parameters:
        - name: query
          in: query
          description: a query by example
          required: true
          schema:
            type: string
          example: corn
        - name: maxHits
          in: query
          description: maximum number of matches to return
          required: false
          schema:
            type: integer
            format: int32
            default: 10
          example: 20
        - name: threshold
          in: query
          description: lowest score to return
          required: false
          schema:
            type: number
            format: float
          example: 0.7
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/searchResponse"
        500:
          description: The searcher is not working correctly.

  /v1/compositionalSearch:
    put:
      summary: For a home item in the compositional ontology and zero or more away items, find the best matches in the datamarts.
      description: ""
      parameters:
        - name: maxHits
          in: query
          description: maximum number of matches to return
          required: false
          schema:
            type: integer
            format: int32
            default: 10
          example: 1
        - name: threshold
          in: query
          description: lowest score to return
          required: false
          schema:
            type: number
            format: float
          example: 0.7
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                homeId:
                  $ref: "#/components/schemas/compositionalOntologyNode"
                awayIds:
                  type: array
                  items:
                    $ref: "#/components/schemas/compositionalOntologyNode"
              example:
                homeId:
                  concept: "wm/concept/population/age"
                  conceptProperty: "wm/property/stability"
                  process: "wm/process/train/agriculture_training"
                  processProperty: "wm/property/diversity"
                awayIds:
                    - concept: "wm/concept/health/life"
                      conceptProperty: "wm/property/insecurity"
                      process: "wm/process/intake"
                      processProperty: "wm/property/preference"
                    - concept: "wm/concept/health/life"
                      conceptProperty: "wm/property/insecurity"
                      process: "wm/process/intake"
                      processProperty: "wm/property/preference"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/compositionalSearchResponse"
        500:
          description: The searcher is not working correctly.

  /v1/bulkSearchOntologyToDatamart:
    get:
      summary: For each item in the ontology, find the best matches in the datamarts
      description: ""
      parameters:
        - name: secret
          in: query
          description: the secret that allows access to this operation
          required: true
          schema:
            type: string
          example: secret
        - name: maxHits
          in: query
          description: maximum number of matches to return per ontology
          required: false
          schema:
            type: integer
            format: int32
          example: 1
        - name: threshold
          in: query
          description: lowest score to return
          required: false
          schema:
            type: number
            format: float
          example: 0.7
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/bulkSearchOntologyToDatamartResponse"
        500:
          description: The searcher is not working correctly.
        503:
          description: The searcher is not yet ready.

  /v1/bulkSearchDatamartToOntology:
    get:
      summary: For each item in the datamarts, find the best matches in the ontology
      description: ""
      parameters:
        - name: secret
          in: query
          description: the secret that allows access to this operation
          required: true
          schema:
            type: string
          example: secret
        - name: maxHits
          in: query
          description: maximum number of matches to return per datamart
          required: false
          schema:
            type: integer
            format: int32
          example: 1
        - name: threshold
          in: query
          description: lowest score to return
          required: false
          schema:
            type: number
            format: float
          example: 0.7
        - name: compositional
          in: query
          description: whether to use compositional grounding rather than the default flat grounding
          required: false
          schema:
            type: boolean
            default: false
          example: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/bulkSearchDatamartToOntologyResponse"
        500:
          description: The searcher is not working correctly.
        503:
          description: The searcher is not yet ready.

  /v1/groundIndicator:
    put:
      summary: Ground all of the outputs of an indicator.
      description: ""
      parameters:
        - name: maxHits
          in: query
          description: maximum number of matches to return per output
          required: false
          schema:
            type: integer
            format: int32
            default: 10
          example: 10
        - name: threshold
          in: query
          description: lowest score to return
          required: false
          schema:
            type: number
            format: float
          example: 0.7
        - name: compositional
          in: query
          description: whether to use compositional grounding rather than the default flat grounding
          required: false
          schema:
            type: boolean
            default: true
          example: true

      requestBody:
        content:
          application/json:
            schema:
              type: object

      responses:
        200:
          description: OK
          content:
            application/json:

        500:
          description: The searcher is not working correctly.

  /v1/groundModel:
    put:
      summary: Ground all of the parameters and outputs of a model.
      description: ""
      parameters:
        - name: maxHits
          in: query
          description: maximum number of matches to return per output
          required: false
          schema:
            type: integer
            format: int32
            default: 10
          example: 10
        - name: threshold
          in: query
          description: lowest score to return
          required: false
          schema:
            type: number
            format: float
          example: 0.7
        - name: compositional
          in: query
          description: whether to use compositional grounding rather than the default flat grounding
          required: false
          schema:
            type: boolean
            default: true
          example: true

      requestBody:
        content:
          application/json:
            schema:
              type: object

      responses:
        200:
          description: OK
          content:
            application/json:

        500:
          description: The searcher is not working correctly.

  /v1/reindex:
    put:
      summary: Scrape and reindex the ISI datamarts and SuperMaaS
      description: "All the data will be downloaded to a new directory and then reindexed.  Searches conducted after the index is complete will run on the new index."
      parameters:
        - name: secret
          in: query
          description: the secret that allows access to this operation
          required: true
          schema:
            type: string
          example: secret
      responses:
        201:
          description: The new index is being created.
        401:
          description: The request is not authorized by the secret.
        500:
          description: The indexer is not working correctly.
        503:
          description: The indexer is busy loading or indexing.
